(()=>{"use strict";const l={run(l){},start(l){},end(l){},move(l,n){}},n={conn:null,start(){this.conn=new WebSocket("ws://localhost/ws"),this.conn.onclose=function(l){console.warn("Connection closed")},this.conn.onopen=function(l){console.log("Socket connected")},this.conn.onmessage=function(n){let e=JSON.parse(n.data);l.run(e)}},joinRoom(l){this.send("join_room",{room_name:l})},createRoom(l){this.send("create_room",{room_name:l})},move(l,n){this.send("move",{from:l,to:n})},send(l,n){let e={action:l,...n},t=JSON.stringify(e);this.conn.send(t)}},e={create(l){console.log("create room: "+l),n.createRoom(l)},join(l){console.log("join room: "+l),n.joinRoom(l)}};class t{draw(){return{sprite:5}}getMoves(l,n,e){return[]}}class o{draw(){return{sprite:3}}getMoves(l,n,e){return[]}}class s{draw(){return{sprite:0}}getMoves(l,n,e){return[]}}class u{draw(){return{sprite:1}}getMoves(l,n,e){return[]}}class r{draw(){return{sprite:2}}getMoves(l,n,e){return[]}}class i{draw(){return{sprite:4}}getMoves(l,n,e){return[]}}const c={sprites:{chessmen:null},start(){this.sprites.chessmen=new Image,this.sprites.chessmen.src="sprites.png"}};class a{color=0;v=0;h=0;piece=null;active=!1;constructor(l,n,e,c){switch(this.h=n,this.v=e,this.color=c,l){case"pawn":this.piece=new t;break;case"knight":this.piece=new o;break;case"king":this.piece=new s;break;case"queen":this.piece=new u;break;case"bishop":this.piece=new r;break;case"rook":this.piece=new i;break;default:console.error("Didn't find piece")}}draw(){let l=this.piece.draw();g.ctx.drawImage(c.sprites.chessmen,213*l.sprite,213*this.color,213,213,this.h*g.block,this.v*g.block,g.block,g.block)}}const d={canvas:null,ctx:null,cursor:{x:0,y:0},active:{h:0,v:0},block:50,roomName:"",board:[[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null]],start_positions:[[["rook",1],["knight",1],["bishop",1],["queen",1],["king",1],["bishop",1],["knight",1],["rook",1]],[["pawn",1],["pawn",1],["pawn",1],["pawn",1],["pawn",1],["pawn",1],["pawn",1],["pawn",1]],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[["pawn",0],["pawn",0],["pawn",0],["pawn",0],["pawn",0],["pawn",0],["pawn",0],["pawn",0]],[["rook",0],["knight",0],["bishop",0],["queen",0],["king",0],["bishop",0],["knight",0],["rook",0]]],color:null,canMove:!1,conn:null,init(){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d")},start(){document.getElementById("join").style.display="none";for(let l=0;l<8;l++)for(let n=0;n<8;n++)null!==this.start_positions[l][n]&&(this.board[l][n]=new a(this.start_positions[l][n][0],n,l,this.start_positions[l][n][1]));this.tic()},draw(){this.draw_board()},tic(){this.draw()},draw_board:function(){this.ctx.fillStyle="rgb(255, 255, 255)",this.ctx.fillRect(0,0,8*this.block,8*this.block);let l=0;for(let n=0;n<8;n++){for(let e=0;e<8;e++)this.ctx.fillStyle=l%2==-0?"#ceb29c":"#f5e6cf",this.ctx.fillRect(e*this.block,n*this.block,this.block,this.block),l++;l++}},draw_chessmen:function(){for(let l=0;l<8;l++)for(let n=0;n<8;n++)null!==this.board[l][n]&&this.board[l][n].draw()},select(){null!==this.board[v][h]&&(this.active={v,h})},move(l,n){console.log("game.move");let e={h:l,v:n},t={h:this.active.h,v:this.active.v};m.move(e,t)}},m={start(){document.getElementById("createRoom").addEventListener("click",(l=>{e.create(document.getElementById("roomName").value)})),document.getElementById("joinRoom").addEventListener("click",(l=>{e.join(document.getElementById("roomName").value)})),d.canvas.addEventListener("mousedown",this.down),d.canvas.addEventListener("mouseup",this.up),d.canvas.addEventListener("mousemove",this.move)},down(l){let n=Math.floor(l.offsetX/d.block),e=Math.floor(l.offsetY/d.block);d.cursor.ox=n*d.block-l.offsetX,d.cursor.oy=e*d.block-l.offsetY,console.log([n,e])},up(l){let n=Math.floor(l.offsetX/d.block),e=Math.floor(l.offsetY/d.block);console.log([n,e]),d.move(e,n)},move(l){d.cursor.x=l.offsetX,d.cursor.y=l.offsetY}};console.log("Start"),d.init(),m.start(),n.start(),d.start(),setTimeout((()=>{d.tic()}),1e3)})();